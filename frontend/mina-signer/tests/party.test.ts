import Client from "../src/MinaSigner";
import type { Party, Signed } from "../src/TSTypes";

/**
 * This is an example of a Parties transaction. This can be generated by
 * creating a transaction in SnarkyJS and printing it out as JSON.
 *
 * TODO: When there is an example of how to do this in the SnarkyJS repo,
 * use that example instead.
 */
let otherParties = {
  otherParties: [
    {
      body: {
        publicKey: "B62qieh9a3U8Z4s8c3DHhCyDECqyZLyRtGA5GBDMqqi6Lf1gaHX4hLt",
        tokenId: "wSHV2S4qX9jFsLjQo8r1BsMLH2ZRKsZx6EJd1sbozGPieEC4Jf",
        update: {
          appState: ["10", null, null, null, null, null, null, null],
          delegate: null,
          verificationKey: {
            data: "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",
            hash: "18753095584909191988538875989540962807093667505395285390425215897303813357929",
          },
          permissions: {
            editState: "Proof",
            send: "Signature",
            receive: "Proof",
            setDelegate: "Signature",
            setPermissions: "Signature",
            setVerificationKey: "Signature",
            setZkappUri: "Signature",
            editSequenceState: "Proof",
            setTokenSymbol: "Signature",
            incrementNonce: "Signature",
            setVotingFor: "Signature",
          },
          zkappUri: null,
          tokenSymbol: null,
          timing: null,
          votingFor: null,
        },
        balanceChange: { magnitude: "0", sgn: "Positive" },
        incrementNonce: false,
        events: [],
        sequenceEvents: [],
        callData: "0",
        callDepth: 0,
        protocolStatePrecondition: {
          snarkedLedgerHash: null,
          timestamp: null,
          blockchainLength: { lower: "0", upper: "4294967295" },
          minWindowDensity: { lower: "0", upper: "4294967295" },
          totalCurrency: { lower: "0", upper: "18446744073709551615" },
          globalSlotSinceHardFork: { lower: "0", upper: "4294967295" },
          globalSlotSinceGenesis: { lower: "0", upper: "4294967295" },
          stakingEpochData: {
            ledger: {
              hash: null,
              totalCurrency: { lower: "0", upper: "18446744073709551615" },
            },
            seed: null,
            startCheckpoint: null,
            lockCheckpoint: null,
            epochLength: { lower: "0", upper: "4294967295" },
          },
          nextEpochData: {
            ledger: {
              hash: null,
              totalCurrency: { lower: "0", upper: "18446744073709551615" },
            },
            seed: null,
            startCheckpoint: null,
            lockCheckpoint: null,
            epochLength: { lower: "0", upper: "4294967295" },
          },
        },
        accountPrecondition: {
          balance: { lower: "0", upper: "18446744073709551615" },
          nonce: { lower: "0", upper: "4294967295" },
          receiptChainHash: null,
          publicKey: null,
          delegate: null,
          state: [null, null, null, null, null, null, null, null],
          sequenceState: null,
          provedState: null,
        },
        useFullCommitment: true,
        caller: "wSHV2S4qX9jFsLjQo8r1BsMLH2ZRKsZx6EJd1sbozGPieEC4Jf",
      },
      authorization: {
        proof: null,
        signature:
          "7mXUeGjU88qsWxLuQg73SZFymiY69bntH4m8uwbtd5KDqpRWedb4T4YJKDkbjq6TtdYox5UhuJ2TPZbaogvkpuyo2H7kFB73",
      },
    },
  ],
  memo: "E4YM2vTHhWEg66xpj52JErHUBU4pZ1yageL4TVDDpTTSsv8mK6YaH",
};
describe("Party", () => {
  let client: Client;

  beforeAll(async () => {
    client = new Client({ network: "mainnet" });
  });

  it("generates a signed party", () => {
    const keypair = client.genKeys();
    const parties = client.signParty(
      {
        parties: otherParties,
        feePayer: {
          feePayer: keypair.publicKey,
          fee: "1",
          nonce: "0",
          memo: "test memo",
        },
      },
      keypair.privateKey
    );
    expect(parties.data).toBeDefined();
    expect(parties.signature).toBeDefined();
  });

  it("generates a signed party by using signTransaction", () => {
    const keypair = client.genKeys();
    const parties = client.signTransaction(
      {
        parties: otherParties,
        feePayer: {
          feePayer: keypair.publicKey,
          fee: "1",
          nonce: "0",
          memo: "test memo",
        },
      },
      keypair.privateKey
    ) as Signed<Party>;
    expect(parties.data).toBeDefined();
    expect(parties.signature).toBeDefined();
  });
});
