apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.daemon.name }}
  labels:
    app: {{ .Values.daemon.name }}
spec:
  replicas: {{ .Values.daemon.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.daemon.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.daemon.name }}
        testnet: {{ .Values.testnetName }}
        role: {{ default "undefined" .Values.daemon.role }}
        class: {{ default "undefined" .Values.daemon.class }}
        version: {{ trunc 6 (split ":" $.Values.mina.image)._1 | trimSuffix "-" }}
        syncStatus: INIT
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: {{ $.Values.mina.ports.metrics | quote }}
        prometheus.io/path: '/metrics'
    spec:
      initContainers:
      {{ if .Values.daemon.libp2pKeys.enabled -}}
      - name: fix-libp2p-perms
        image: busybox:latest
        command:
        - bash
        - -c
        - /bin/cp /libp2p-keys/* /root/libp2p-keys && /bin/chmod -R 0700 /root/libp2p-keys/
        volumeMounts:
        - name: mounted-libp2p-keys
          mountPath: /libp2p-keys
        - name: fixed-libp2p-keys
          mountPath: /root/libp2p-keys
      {{- end }}
      {{ if .Values.daemon.minaKeys.enabled -}}
      - name: fix-mina-perms
        image: busybox:latest
        command:
        - bash
        - -c
        - /bin/cp /mina-keys/* /root/mina-keys/ && /bin/chmod -R 0700 /root/mina-keys/
        volumeMounts:
        - name: mounted-mina-keys
          mountPath: /mina-keys
        - name: fixed-mina-keys
          mountPath: /root/mina-keys
      {{- end }}
      containers:
      - name: mina
        resources:
          limits:
          requests:
            memory: {{ .Values.mina.memRequest }}
            cpu: {{ .Values.mina.cpuRequest }}
        image: {{ .Values.mina.image }}
        {{ if .Values.mina.useCustomEntrypoint -}}
        command: [{{ .Values.mina.customEntrypoint }}]
        {{- end }}
        args: [ "daemon",
          "-log-level", "Debug",
          "-log-json",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          {{- if .Values.mina.exposeGraphql }}
          "-insecure-rest-server",
          {{- end -}}
          {{- if .Values.mina.maxConnections }}
          "--max-connections", {{ $.Values.mina.maxConnections | quote }},
          {{- end -}}
          {{- if .Values.mina.peerListURL }}
          "-peer-list-url", {{ $.Values.mina.peerListURL | quote }},
          {{- end -}}
          {{- if .Values.mina.runtimeConfig }}
          "-config-file", "/config/daemon.json",
          {{- end }}
          {{- if .Values.daemon.libp2pKeys.enabled }}
          "-discovery-keypair", "/root/libp2p-keys/${HOSTNAME}-key",
          {{- end -}}
          {{- if and .Values.daemon.minaKeys.enabled .Values.daemon.minaKeys.produceBlocks }}
          "-discovery-keypair", "/root/mina-keys/${HOSTNAME}-key",
          {{- end -}}
          {{- range .Values.mina.seedPeers }}
          "-peer", {{ . | quote }},
          {{- end }}
          {{- if .Values.mina.uploadBlocksToGCloud }}
          "-upload-blocks-to-gcloud", "true",
          {{- end }}
          {{- if .Values.daemon.archive.enabled }}
          "-archive-address", {{ .Values.daemon.archive.address }},
          {{- end }}
          {{- if .Values.daemon.seedFlags }}
          "-enable-peer-exchange", "true", "-seed"
          {{- end}}
        ]
        env:
        - name: NETWORK_NAME
          value: {{ .Values.testnetName }}
        - name: DAEMON_REST_PORT
          value: {{ .Values.mina.ports.graphql | quote }}
        - name: DAEMON_CLIENT_PORT
          value: {{ .Values.mina.ports.client | quote }}
        - name: DAEMON_METRICS_PORT
          value: {{ .Values.mina.ports.metrics | quote }}
        - name: MINA_CLIENT_TRUSTLIST
          value: "10.0.0.0/8"
        {{- if $.Values.mina.uploadBlocksToGCloud }}
        - name: GCLOUD_KEYFILE
          value: "/gcloud/keyfile.json"
        - name: GCLOUD_BLOCK_UPLOAD_BUCKET
          value: "mina_network_block_data"
        {{- end }}
        - name: DAEMON_EXTERNAL_PORT
          value: {{ .Values.mina.ports.p2p | quote }}
        {{- if .Values.daemon.libp2pKeys.enabled }}
        - name: MINA_LIBP2P_PASS
          value: {{ .Values.daemon.libp2pKeys.password | quote }}
        {{- end }}
        {{- if .Values.daemon.minaKeys.enabled }}
        - name: MINA_PRIVKEY_PASS
          value: {{ .Values.mina.minaKeys.password | quote }}
        {{- end }}
        ports:
        - name: client-port
          protocol: TCP
          containerPort: {{ .Values.mina.ports.client }}
        - name: graphql-port
          protocol: TCP
          containerPort: {{ .Values.mina.ports.graphql }}
        - name: metrics-port
          protocol: TCP
          containerPort: {{ .Values.mina.ports.metrics }}
        - name: external-port
          protocol: TCP
          containerPort: {{ .Values.mina.ports.p2p }}
          hostPort: {{ .Values.mina.ports.external }}
{{$data := dict "name" .Values.daemon.name "healthcheck" .Values.healthcheck }}
{{- include "healthcheck.seed.allChecks" $data | indent 8 }}
        imagePullPolicy: Always
        volumeMounts:
        {{- if .Values.daemon.libp2pKeys.enabled }}
        - name: actual-libp2p
          mountPath: /root/libp2p-keys
        {{- end }}
        {{- if .Values.mina.uploadBlocksToGCloud }}
        - name: gcloud-keyfile
          mountPath: "/gcloud/"
        {{- end }}
        {{- if .Values.mina.runtimeConfig }}
        - name: daemon-config
          mountPath: "/config/"
        {{- end }}
      volumes:
      {{- if .Values.mina.runtimeConfig }}
      - name: daemon-config
        configMap:
          name: daemon-config
      {{- end }}
      {{- if .Values.daemon.minaKeys.enabled }}
      - name: mounted-mina-keys
        secret:
          secretName: {{ .Values.daemon.minaKeys.secret }}
          defaultMode: 0600
      - name: fixed-mina-keys
        emptyDir: {}
      {{- end }}
      {{- if .Values.daemon.libp2pKeys.enabled }}
      - name: mounted-libp2p-keys
        secret:
          secretName: {{ .Values.daemon.libp2pKeys.secret }}
          defaultMode: 0600
      - name: fixed-libp2p-keys
        emptyDir: {}
      {{- end }}
      {{- if $.Values.mina.uploadBlocksToGCloud }}
      - name: gcloud-keyfile
        secret:
          secretName: gcloud-keyfile
          defaultMode: 0400
          items:
          - key: keyfile
            path: keyfile.json
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.daemon.name }}
spec:
  {{- if .Values.daemon.externalIp }}
  type: LoadBalancer
  loadBalancerIP: {{ .Values.daemon.externalIp }}
  {{- else }}
  type: ClusterIP
  {{- end }}
  # We want all pods to have their addresses published for the sake of the
  # other testnet pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  selector:
    app: {{ .Values.daemon.name }}
  ports:
  - name: tcp-p2p
    port: {{ .Values.mina.ports.p2p }}
    targetPort: external-port
---
{{- if .Values.mina.exposeGraphql }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.daemon.name }}-graphql
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  selector:
    app: {{ .Values.daemon.name }}
  ports:
  - name: http-graphql
    protocol: TCP
    port: 80
    targetPort: {{ $.Values.mina.ports.graphql }}
{{- end }}
