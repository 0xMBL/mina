(* values.ml -- values for heap_usage app *)

open Core_kernel

[@@@warning "-26-32"]

(*

let sample_pk = Quickcheck.random_value Signature_lib.Public_key.gen

let sample_pk_compressed = Signature_lib.Public_key.compress sample_pk

let account : Mina_base.Account.t =
  (* if there's a zkApp account, size is almost constant
     the zkapp_uri field is not currently bounded in size
  *)
  let zkapp_account : Mina_base.Zkapp_account.t =
    let app_state =
      Pickles_types.Vector.to_list Mina_base.Zkapp_account.default.app_state
      |> Pickles_types.Vector.Vector_8.of_list_exn
    in
    { Mina_base.Zkapp_account.default with
      app_state
    ; verification_key =
        Some
          With_hash.
            { data = Pickles.Side_loaded.Verification_key.dummy
            ; hash = Mina_base.Zkapp_account.dummy_vk_hash ()
            }
    ; zkapp_uri =
        "https://www.example.com/this-is-a-decently-long-url/latest-zkapp-implementation.html"
    }
  in
  { Mina_base.Account.empty with
    token_symbol = "123456"
  ; zkapp = Some zkapp_account
  }

(* beefy zkapp command with all proof updates *)
let zkapp_command =
  let num_updates = 16 in
  let _ledger, zkapp_commands =
    Snark_profiler_lib.create_ledger_and_zkapps ~min_num_updates:num_updates
      ~num_proof_updates:num_updates ~max_num_updates:num_updates ()
  in
  List.hd_exn zkapp_commands

let applied = Mina_base.Transaction_status.Applied

let from_access_statuses with_statuses =
  List.filter_map with_statuses ~f:(function
    | acct, `Accessed ->
        Some acct
    | _acct, `Not_accessed ->
        None )

let mk_scan_state_base_node
    (varying : Mina_transaction_logic.Transaction_applied.Varying.t) :
    Transaction_snark_scan_state.Transaction_with_witness.t Parallel_scan.Base.t
    =
  let weight : Parallel_scan.Weight.t = { base = 42; merge = 99 } in
  let job :
      Transaction_snark_scan_state.Transaction_with_witness.t
      Parallel_scan.Base.Job.t =
    let get = Quickcheck.random_value in
    let state_hash = get Mina_base.State_hash.gen in
    let state_body_hash = get Mina_base.State_body_hash.gen in
    let statement = get Transaction_snark.Statement.gen in
    let init_stack =
      Transaction_snark.Pending_coinbase_stack_state.Init_stack.Merge
    in
    let ledger_witness =
      let depth =
        Genesis_constants.Constraint_constants.compiled.ledger_depth
      in
      let accounts_accessed =
        match varying with
        | Command (Signed_command signed_cmd) ->
            let user_cmd = signed_cmd.common.user_command.data in
            Mina_base.Signed_command.account_access_statuses user_cmd applied
            |> from_access_statuses
        | Command (Zkapp_command zkapp_cmd) ->
            let zkapp_cmd = zkapp_cmd.command.data in
            Mina_base.Zkapp_command.account_access_statuses zkapp_cmd applied
            |> from_access_statuses
        | Fee_transfer ft ->
            let fee_transfer = ft.fee_transfer.data in
            Mina_base.Fee_transfer.receivers fee_transfer
        | Coinbase cb ->
            let coinbase = cb.coinbase.data in
            Mina_base.Coinbase.account_access_statuses coinbase applied
            |> from_access_statuses
      in
      (* for zkApps, some or all of the accounts will be zkApp accounts, so this
         understates mem usage
      *)
      let ledger = Mina_ledger.Ledger.create ~depth () in
      let accounts =
        Quickcheck.random_value
        @@ Quickcheck.Generator.list_with_length
             (List.length accounts_accessed)
             Mina_base.Account.gen
      in
      List.iter accounts ~f:(fun acct ->
          ignore
            ( Mina_ledger.Ledger.get_or_create_account ledger
                (Mina_base.Account.identifier acct)
                acct
              : _ ) ) ;
      Mina_ledger.Sparse_ledger.of_any_ledger
        (Mina_ledger.Ledger.Any_ledger.cast (module Mina_ledger.Ledger) ledger)
    in
    let transaction_with_info : Mina_transaction_logic.Transaction_applied.t =
      let previous_hash = get Mina_base.Ledger_hash.gen in
      { previous_hash; varying }
    in
    let job : Transaction_snark_scan_state.Transaction_with_witness.t =
      { transaction_with_info
      ; state_hash = (state_hash, state_body_hash)
      ; statement
      ; init_stack
      ; first_pass_ledger_witness = ledger_witness
      ; second_pass_ledger_witness = ledger_witness
      ; block_global_slot = Mina_numbers.Global_slot.zero
      }
    in
    let record : _ Parallel_scan.Base.Record.t =
      { job; seq_no = 1; status = Todo }
    in
    Full record
  in
  (weight, job)

let scan_state_base_node_coinbase =
  let varying : Mina_transaction_logic.Transaction_applied.Varying.t =
    let coinbase =
      Mina_base.Coinbase.create ~amount:Currency.Amount.zero
        ~receiver:sample_pk_compressed ~fee_transfer:None
      |> Or_error.ok_exn
    in
    Coinbase
      { coinbase = Mina_base.With_status.{ data = coinbase; status = Applied }
      ; new_accounts = []
      ; burned_tokens = Currency.Amount.zero
      }
  in
  mk_scan_state_base_node varying

let scan_state_base_node_payment =
  let varying : Mina_transaction_logic.Transaction_applied.Varying.t =
    let payload : Mina_base.Signed_command_payload.t =
      let payment_payload =
        Quickcheck.random_value
          (Mina_base.Payment_payload.gen Currency.Amount.zero)
      in
      let body : Mina_base.Signed_command_payload.Body.t =
        Payment payment_payload
      in
      let common : Mina_base.Signed_command_payload.Common.t =
        { fee = Currency.Fee.zero
        ; fee_payer_pk = sample_pk_compressed
        ; nonce = Mina_numbers.Account_nonce.zero
        ; valid_until = Mina_numbers.Global_slot.max_value
        ; memo = Mina_base.Signed_command_memo.empty
        }
      in
      { common; body }
    in
    let user_command : _ Mina_base.With_status.t =
      let signer = sample_pk in
      let data : Mina_base.Signed_command.t =
        { payload; signer; signature = Mina_base.Signature.dummy }
      in
      { data; status = Applied }
    in
    let common :
        Mina_transaction_logic.Transaction_applied.Signed_command_applied.Common
        .t =
      { user_command }
    in
    let body :
        Mina_transaction_logic.Transaction_applied.Signed_command_applied.Body.t
        =
      Payment { new_accounts = [] }
    in
    Command (Signed_command { common; body })
  in
  mk_scan_state_base_node varying

let scan_state_base_node_zkapp =
  let varying : Mina_transaction_logic.Transaction_applied.Varying.t =
    let zkapp_command_applied :
        Mina_transaction_logic.Transaction_applied.Zkapp_command_applied.t =
      let accounts =
        (* fudge: the `accounts` calculation is more complex; see `apply_zkapp_command_unchecked_aux`
           also, we're using the same account repeatedly
        *)
        let accessed =
          Mina_base.Zkapp_command.account_access_statuses zkapp_command applied
          |> from_access_statuses
        in
        List.map accessed ~f:(fun acct_id -> (acct_id, Some account))
      in
      let command =
        Mina_base.With_status.{ data = zkapp_command; status = applied }
      in
      let new_accounts = [] in
      { accounts; command; new_accounts }
    in
    Command (Zkapp_command zkapp_command_applied)
  in
  mk_scan_state_base_node varying

let scan_state_merge_node :
    Transaction_snark_scan_state.Ledger_proof_with_sok_message.t
    Parallel_scan.Merge.t =
  let weight1 : Parallel_scan.Weight.t = { base = 42; merge = 99 } in
  let weight2 : Parallel_scan.Weight.t = { base = 88; merge = 77 } in
  let job :
      Transaction_snark_scan_state.Ledger_proof_with_sok_message.t
      Parallel_scan.Merge.Job.t =
    let left =
      let sok_msg : Mina_base.Sok_message.t =
        { fee = Currency.Fee.zero; prover = sample_pk_compressed }
      in
      let proof = Mina_base.Proof.transaction_dummy in
      let statement =
        let without_sok =
          Quickcheck.random_value ~seed:(`Deterministic "no sok left")
            Transaction_snark.Statement.gen
        in
        { without_sok with sok_digest = Mina_base.Sok_message.digest sok_msg }
      in
      let ledger_proof = Transaction_snark.create ~statement ~proof in
      (ledger_proof, sok_msg)
    in
    let right =
      let sok_msg : Mina_base.Sok_message.t =
        { fee = Currency.Fee.zero; prover = sample_pk_compressed }
      in
      let proof =
        Result.ok_or_failwith
        @@ Mina_base.Proof.of_yojson
             (`String
               ""
               )
      in
      let statement =
        let without_sok =
          Quickcheck.random_value ~seed:(`Deterministic "no sok right")
            Transaction_snark.Statement.gen
        in
        { without_sok with sok_digest = Mina_base.Sok_message.digest sok_msg }
      in
      let ledger_proof = Transaction_snark.create ~statement ~proof in
      (ledger_proof, sok_msg)
    in
    Full { left; right; seq_no = 1; status = Todo }
  in
  ((weight1, weight2), job)
*)
let protocol_state =
  let ledger_proof_statement =
    Quickcheck.random_value Mina_state.Snarked_ledger_state.gen
    |> Mina_state.Snarked_ledger_state.to_yojson |> Yojson.Safe.to_string
  in
  (* size is fixed *)
  let json =
    Yojson.Safe.from_string
    @@ sprintf
         {json|
 {
     "previous_state_hash": "3NL5YY6SBChV9bDTFwMegztXPQkT5kKKfKhY61DyYWpFV2fxtNLD",
     "body": {
         "genesis_state_hash": "3NL5YY6SBChV9bDTFwMegztXPQkT5kKKfKhY61DyYWpFV2fxtNLD",
         "blockchain_state": {
             "staged_ledger_hash": {
                 "non_snark": {
                     "ledger_hash": "jxbwsja7766oVsNcZrMetaWSTqK7XBqgrSttaH5H74E5aN9nwsP",
                     "aux_hash": "UjJhe9UvGSgmN4Ckyu83JGeL8dayusEoXquzNqWDAjiubWg8p1",
                     "pending_coinbase_aux": "XH9htC21tQMDKM6hhATkQjecZPRUGpofWATXPkjB5QKxpTBv7H"
                 },
                 "pending_coinbase_hash": "2n1KVFYysZUDR1HDZuyq4YeXPGRY1gpPan8TQGFCxVSPfChDgAJn"
             },
             "genesis_ledger_hash": "jxhv1J2fQRtRiv5cQZJBnS2ncRQznQ4pUfL5MMVBwi3uRAMh34t",
             "ledger_proof_statement": %s, 
             "timestamp": "1668291220375",
             "body_reference": "fff2f336633a60b222c23a2ff28467c7cd72fbc525855c1cbea323ecddf7b29d"
         },
         "consensus_state": {
             "blockchain_length": "2",
             "epoch_count": "0",
             "min_window_density": "6",
             "sub_window_densities": [
                 "1",
                 "0",
                 "0"
             ],
             "last_vrf_output": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
             "total_currency": "10016120000000000",
             "curr_global_slot": {
                 "slot_number": "6",
                 "slots_per_epoch": "576"
             },
             "global_slot_since_genesis": "6",
             "staking_epoch_data": {
                 "ledger": {
                     "hash": "jxhv1J2fQRtRiv5cQZJBnS2ncRQznQ4pUfL5MMVBwi3uRAMh34t",
                     "total_currency": "10016100000000000"
                 },
                 "seed": "2va9BGv9JrLTtrzZttiEMDYw1Zj6a6EHzXjmP9evHDTG3oEquURA",
                 "start_checkpoint": "3NK2tkzqqK5spR2sZ7tujjqPksL45M3UUrcA4WhCkeiPtnugyE2x",
                 "lock_checkpoint": "3NK2tkzqqK5spR2sZ7tujjqPksL45M3UUrcA4WhCkeiPtnugyE2x",
                 "epoch_length": "1"
             },
             "next_epoch_data": {
                 "ledger": {
                     "hash": "jxhv1J2fQRtRiv5cQZJBnS2ncRQznQ4pUfL5MMVBwi3uRAMh34t",
                     "total_currency": "10016100000000000"
                 },
                 "seed": "2vbhjwHdFZqQaG1zZVkrnHacQba792hNoPuBd4KLTnMgwCSP5f4d",
                 "start_checkpoint": "3NK2tkzqqK5spR2sZ7tujjqPksL45M3UUrcA4WhCkeiPtnugyE2x",
                 "lock_checkpoint": "3NL5YY6SBChV9bDTFwMegztXPQkT5kKKfKhY61DyYWpFV2fxtNLD",
                 "epoch_length": "3"
             },
             "has_ancestor_in_same_checkpoint_window": true,
             "block_stake_winner": "B62qiy32p8kAKnny8ZFwoMhYpBppM1DWVCqAPBYNcXnsAHhnfAAuXgg",
             "block_creator": "B62qiy32p8kAKnny8ZFwoMhYpBppM1DWVCqAPBYNcXnsAHhnfAAuXgg",
             "coinbase_receiver": "B62qpPjYco6oESJyGjdFNjmBnwEyzsujJ785aMAzygzSF4X9g4g1uEo",
             "supercharge_coinbase": true
         },
         "constants": {
             "k": "24",
             "slots_per_epoch": "576",
             "slots_per_sub_window": "2",
             "delta": "0",
             "genesis_state_timestamp": "1548878400000"
         }
     }
 } |json}
         ledger_proof_statement
  in
  Mina_state.Protocol_state.value_of_yojson json |> Result.ok_or_failwith
(*
let pending_coinbase =
  (* size is fixed, given a particular depth *)
  let depth =
    Genesis_constants.Constraint_constants.compiled.pending_coinbase_depth
  in
  Mina_base.Pending_coinbase.create ~depth () |> Or_error.ok_exn

let staged_ledger_diff =
  (* size varies, depending on number and size of commands *)
  let json =
    Yojson.Safe.from_string
      {json|
  {
      "diff": [
        {
          "completed_works": [],
          "commands": [
            {
              "data": [
                "Signed_command",
                {
                  "payload": {
                    "common": {
                      "fee": "0",
                      "fee_payer_pk": "B62qiy32p8kAKnny8ZFwoMhYpBppM1DWVCqAPBYNcXnsAHhnfAAuXgg",
                      "nonce": "0",
                      "valid_until": "4294967295",
                      "memo": "E4QqiVG8rCzSPqdgMPUP59hA8yMWV6m8YSYGSYBAofr6mLp16UFnM"
                    },
                    "body": [
                      "Payment",
                      {
                        "source_pk": "B62qiy32p8kAKnny8ZFwoMhYpBppM1DWVCqAPBYNcXnsAHhnfAAuXgg",
                        "receiver_pk": "B62qiy32p8kAKnny8ZFwoMhYpBppM1DWVCqAPBYNcXnsAHhnfAAuXgg",
                        "amount": "1000000001"
                      }
                    ]
                  },
                  "signer": "B62qiy32p8kAKnny8ZFwoMhYpBppM1DWVCqAPBYNcXnsAHhnfAAuXgg",
                  "signature": "7mXFbws8zFVHDngRcRgUAs9gvWcJ4ZDmXrjXozyhhNyM1KrR2XsBzSQGDSR4ghD5Dip13iFrnweGKB5mguDmDLhk1h87etB8"
                }
              ],
              "status": [
                "Applied"
              ]
            },
            {
              "data": [
                "Signed_command",
                {
                  "payload": {
                    "common": {
                      "fee": "0",
                      "fee_payer_pk": "B62qrA2eWb592uRLtH5ohzQnx7WTLYp2jGirCw5M7Fb9gTf1RrvTPqX",
                      "nonce": "0",
                      "valid_until": "4294967295",
                      "memo": "E4QqiVG8rCzSPqdgMPUP59hA8yMWV6m8YSYGSYBAofr6mLp16UFnM"
                    },
                    "body": [
                      "Payment",
                      {
                        "source_pk": "B62qrA2eWb592uRLtH5ohzQnx7WTLYp2jGirCw5M7Fb9gTf1RrvTPqX",
                        "receiver_pk": "B62qkYgXYkzT5fuPNhMEHk8ouiThjNNDSTMnpBAuaf6q7pNnCFkUqtz",
                        "amount": "1000000001"
                      }
                    ]
                  },
                  "signer": "B62qrA2eWb592uRLtH5ohzQnx7WTLYp2jGirCw5M7Fb9gTf1RrvTPqX",
                  "signature": "7mXJfHCobCvXcpAZRKgqmnrsewVuEcUaQ2dkjfYuodwqR2bYZUZkmJZmNoTKM9HJ8tV6hW7pRFjL7oeNvzbRiPGt9pyf93hJ"
                }
              ],
              "status": [
                "Applied"
              ]
            },
            {
              "data": [
                "Signed_command",
                {
                  "payload": {
                    "common": {
                      "fee": "0",
                      "fee_payer_pk": "B62qpkCEM5N5ddVsYNbFtwWV4bsT9AwuUJXoehFhHUbYYvZ6j3fXt93",
                      "nonce": "0",
                      "valid_until": "4294967295",
                      "memo": "E4QqiVG8rCzSPqdgMPUP59hA8yMWV6m8YSYGSYBAofr6mLp16UFnM"
                    },
                    "body": [
                      "Payment",
                      {
                        "source_pk": "B62qpkCEM5N5ddVsYNbFtwWV4bsT9AwuUJXoehFhHUbYYvZ6j3fXt93",
                        "receiver_pk": "B62qqR5XfP9CoC5DALUJX2jBoY6aaoLrN46YpM2NQTSV14qgpoWibL7",
                        "amount": "1000000001"
                      }
                    ]
                  },
                  "signer": "B62qpkCEM5N5ddVsYNbFtwWV4bsT9AwuUJXoehFhHUbYYvZ6j3fXt93",
                  "signature": "7mX5n1jgC1m2jhuo7JMks6veDCNofPXZwFeZLv47ok83RVQkftUFKcD35k4RTo2v7fyroQjB9LSRJHm3S7RQfzesJwJtcFqS"
                }
              ],
              "status": [
                "Applied"
              ]
            },
            {
              "data": [
                "Signed_command",
                {
                  "payload": {
                    "common": {
                      "fee": "0",
                      "fee_payer_pk": "B62qp5sdhH48MurWgtHNkXUTphEmUfcKVmZFspYAqxcKZ7YxaPF1pyF",
                      "nonce": "0",
                      "valid_until": "4294967295",
                      "memo": "E4QqiVG8rCzSPqdgMPUP59hA8yMWV6m8YSYGSYBAofr6mLp16UFnM"
                    },
                    "body": [
                      "Payment",
                      {
                        "source_pk": "B62qp5sdhH48MurWgtHNkXUTphEmUfcKVmZFspYAqxcKZ7YxaPF1pyF",
                        "receiver_pk": "B62qji8zLZEuMUpZnRN3FHgsgnybYhhMFBBMcLAwGGLR3hTdfkhmM4X",
                        "amount": "1000000001"
                      }
                    ]
                  },
                  "signer": "B62qp5sdhH48MurWgtHNkXUTphEmUfcKVmZFspYAqxcKZ7YxaPF1pyF",
                  "signature": "7mX2irhVDZy7bbc6K6q21hpQiB3x7LKw9v6jS5tZBzzEdroQFc5hzT1MwgzK2CavFX6ZkAcHYaxKAz8qwAdruerR7mbFLKa6"
                }
              ],
              "status": [
                "Applied"
              ]
            },
            {
              "data": [
                "Signed_command",
                {
                  "payload": {
                    "common": {
                      "fee": "0",
                      "fee_payer_pk": "B62qqR5XfP9CoC5DALUJX2jBoY6aaoLrN46YpM2NQTSV14qgpoWibL7",
                      "nonce": "0",
                      "valid_until": "4294967295",
                      "memo": "E4QqiVG8rCzSPqdgMPUP59hA8yMWV6m8YSYGSYBAofr6mLp16UFnM"
                    },
                    "body": [
                      "Payment",
                      {
                        "source_pk": "B62qqR5XfP9CoC5DALUJX2jBoY6aaoLrN46YpM2NQTSV14qgpoWibL7",
                        "receiver_pk": "B62qqMGFkBEtgGs2Gi6AWd1Abn9yzXdj5HRMzm95uwbJ8Wa88C7urCD",
                        "amount": "1000000001"
                      }
                    ]
                  },
                  "signer": "B62qqR5XfP9CoC5DALUJX2jBoY6aaoLrN46YpM2NQTSV14qgpoWibL7",
                  "signature": "7mX5N43QQWMjKoXo2bAwPo6jvHNfpVcMse51uy6eXumfWiChmWQb2hejbTn9MaNsYcpNhDpd4oFnsdzqzDveaRuq8xRRJxmK"
                }
              ],
              "status": [
                "Applied"
              ]
            },
            {
              "data": [
                "Signed_command",
                {
                  "payload": {
                    "common": {
                      "fee": "0",
                      "fee_payer_pk": "B62qr4GMdg4ZVk1Y6BXaDHxgFRtCsZm2sZiyn7PCmubTZnAi3iZDDxq",
                      "nonce": "0",
                      "valid_until": "4294967295",
                      "memo": "E4QqiVG8rCzSPqdgMPUP59hA8yMWV6m8YSYGSYBAofr6mLp16UFnM"
                    },
                    "body": [
                      "Payment",
                      {
                        "source_pk": "B62qr4GMdg4ZVk1Y6BXaDHxgFRtCsZm2sZiyn7PCmubTZnAi3iZDDxq",
                        "receiver_pk": "B62qpaA93gHfmvNoH9DLGgxreGnijhh5aui4duxiV3foX4p5ay5RNis",
                        "amount": "1000000001"
                      }
                    ]
                  },
                  "signer": "B62qr4GMdg4ZVk1Y6BXaDHxgFRtCsZm2sZiyn7PCmubTZnAi3iZDDxq",
                  "signature": "7mXFA6dbZCNV7bowrxiWK5zCST3YurHRNiC6m7n39jUgu6jC7VMV3g9xLEP8sraVfoUHhsfaMyYgdXAXmYEgU3WJwdZdqe8Q"
                }
              ],
              "status": [
                "Applied"
              ]
            },
            {
              "data": [
                "Signed_command",
                {
                  "payload": {
                    "common": {
                      "fee": "0",
                      "fee_payer_pk": "B62qpgjtMzVpodthL3kMfXAAzzv1kgGZRMEeLv592u4hSVQKCzTGLvA",
                      "nonce": "0",
                      "valid_until": "4294967295",
                      "memo": "E4QqiVG8rCzSPqdgMPUP59hA8yMWV6m8YSYGSYBAofr6mLp16UFnM"
                    },
                    "body": [
                      "Payment",
                      {
                        "source_pk": "B62qpgjtMzVpodthL3kMfXAAzzv1kgGZRMEeLv592u4hSVQKCzTGLvA",
                        "receiver_pk": "B62qpkCEM5N5ddVsYNbFtwWV4bsT9AwuUJXoehFhHUbYYvZ6j3fXt93",
                        "amount": "1000000001"
                      }
                    ]
                  },
                  "signer": "B62qpgjtMzVpodthL3kMfXAAzzv1kgGZRMEeLv592u4hSVQKCzTGLvA",
                  "signature": "7mX4KgEbFoWZjtNn4ihvSpVaEKGMUVXWVAJuvyrPWWst1miV7eBXLnhRc1V5RfCJ2bvLDrTdCqEhJmaUJMwdTgCF7rFGYcFY"
                }
              ],
              "status": [
                "Applied"
              ]
            }
          ],
          "coinbase": [
            "One",
            null
          ],
          "internal_command_statuses": [
            [
              "Applied"
            ]
          ]
        },
        null
      ]
    }
      |json}
  in
  Staged_ledger_diff.of_yojson json |> Result.ok_or_failwith

let merkle_path =
  (* size is constant for a given length, assuming each hash is distinct *)
  let ledger_depth =
    Genesis_constants.Constraint_constants.compiled.ledger_depth
  in
  let hashes =
    Quickcheck.random_value
    @@ Quickcheck.Generator.list_with_length ledger_depth
         Mina_base.Ledger_hash.gen
  in
  let path : Mina_ledger.Ledger.Db.Path.t =
    List.mapi hashes ~f:(fun n hash ->
        if n % 2 = 0 then `Left hash else `Right hash )
  in
  path
*)

let block_max_apps =
  Protocol_version.(set_current @@ create_exn ~major:1 ~minor:1 ~patch:0) ;
  (* use the protocol state from above *)
  let header =
    Mina_block.Header.create ~protocol_state
      ~protocol_state_proof:Mina_base.Proof.blockchain_dummy
      ~delta_block_chain_proof:(Snark_params.Tick.Field.zero, [])
      ()
  in
  let mk_big_zkapp () : Mina_base.Zkapp_command.t =
    let open Quickcheck in
    let fee_payer : Mina_base.Account_update.Fee_payer.t =
      let body : Mina_base.Account_update.Body.Fee_payer.t =
        let public_key =
          random_value ~seed:`Nondeterministic
            Signature_lib.Public_key.Compressed.gen
        in
        let fee = random_value ~seed:`Nondeterministic Currency.Fee.gen in
        let valid_until =
          Some
            (random_value ~seed:`Nondeterministic Mina_numbers.Global_slot.gen)
        in
        let nonce =
          random_value ~seed:`Nondeterministic Mina_base.Account.Nonce.gen
        in
        { public_key; fee; valid_until; nonce }
      in
      let authorization = Mina_base.Signature.dummy in
      { body; authorization }
    in
    let keypairs =
      List.init 100 ~f:(fun _ -> Signature_lib.Keypair.create ())
    in
    let available_public_keys =
      let module Table = Signature_lib.Public_key.Compressed.Table in
      let tbl = Table.create () in
      List.iter keypairs ~f:(fun kp ->
          let key = Signature_lib.Public_key.compress kp.public_key in
          ignore (Table.add tbl ~key ~data:()) ) ;
      tbl
    in
    let num_account_updates = 5 in
    let account_updates =
      let rec create_update acc n =
        if n <= 0 then acc
        else
          let account_update =
            let authorization : Mina_base.Control.t =
              Proof Mina_base.Proof.transaction_dummy
            in
            let account_ids_seen = Mina_base.Account_id.Hash_set.create () in
            let zkapp_account_ids = [] in
            let account_state_tbl = Mina_base.Account_id.Table.create () in
            (* pack all events, actions into one account update *)
            let num_event_elements =
              if n = num_account_updates then
                Genesis_constants.compiled.max_event_elements
              else 0
            in
            let num_action_elements =
              if n = num_account_updates then
                Genesis_constants.compiled.max_action_elements
              else 0
            in
            let simple_update =
              random_value ~seed:`Nondeterministic
                (Mina_generators.Zkapp_command_generators
                 .gen_account_update_from ~num_event_elements
                   ~num_action_elements ~new_account:true ~authorization
                   ~account_ids_seen ~zkapp_account_ids ~available_public_keys
                   ~account_state_tbl () )
            in
            Mina_base.Account_update.of_simple simple_update
          in
          let acc' =
            Mina_base.Zkapp_command.Call_forest.cons account_update acc
          in
          create_update acc' (n - 1)
      in
      create_update [] num_account_updates
    in
    let memo =
      let open Mina_base.Signed_command_memo in
      let s =
        random_value ~seed:`Nondeterministic
          (String.gen_with_length max_input_length Char.gen_alphanum)
      in
      create_from_string_exn s
    in
    { fee_payer; account_updates; memo }
  in
  let pre_diff_two_coinbases :
      Staged_ledger_diff.Pre_diff_with_at_most_two_coinbase.t =
    let zkapp_commands =
      let num_commands =
        Int.pow 2
          Genesis_constants.Constraint_constants.compiled
            .transaction_capacity_log_2
        - 2
      in
      List.init num_commands ~f:(fun _ -> mk_big_zkapp ())
    in
    List.iter zkapp_commands ~f:(fun zkapp ->
        let result =
          Mina_base.Zkapp_command.valid_size
            ~genesis_constants:Genesis_constants.compiled zkapp
        in
        match result with
        | Ok () ->
            ()
        | Error err ->
            failwithf "zkApp size check failed: %s" (Error.to_string_hum err) () ) ;
    let commands =
      List.map zkapp_commands ~f:(fun zkapp ->
          let data = Mina_base.User_command.Zkapp_command zkapp in
          (* make status kinda big *)
          let status =
            Mina_base.Transaction_status.Failed
              (List.init 5 ~f:(fun _ ->
                   let open Mina_base.Transaction_status.Failure in
                   [ Receiver_not_present
                   ; Amount_insufficient_to_create_account
                   ; Cannot_pay_creation_fee_in_token
                   ; Source_insufficient_balance
                   ; Source_minimum_balance_violation
                   ; Receiver_already_exists
                   ; Token_owner_not_caller
                   ; Overflow
                   ] ) )
          in
          ({ data; status } : _ Mina_base.With_status.t) )
    in
    let completed_works = [] in
    let coinbase =
      let cbs_gen =
        let open Quickcheck.Generator.Let_syntax in
        let%bind cb1 =
          Mina_base.Coinbase.Fee_transfer.Gen.gen Currency.Fee.zero
        in
        let%map cb2 =
          Mina_base.Coinbase.Fee_transfer.Gen.gen Currency.Fee.one
        in
        (cb1, cb2)
      in
      let cb1, cb2 = Quickcheck.random_value cbs_gen in
      Staged_ledger_diff.At_most_two.Two (Some (cb1, Some cb2))
    in
    let internal_command_statuses =
      let open Mina_base.Transaction_status in
      [ Applied; Applied ]
    in
    { completed_works; commands; coinbase; internal_command_statuses }
  in
  ()
(* in
     let pre_diff_one_coinbase :
         Staged_ledger_diff.Pre_diff_with_at_most_one_coinbase.t =
       Obj.magic 42
     in
     let diff = (pre_diff_two_coinbases, Some pre_diff_one_coinbase) in
     Staged_ledger_diff.Body.create { diff }
   in
     Mina_block.create ~header ~body *)
