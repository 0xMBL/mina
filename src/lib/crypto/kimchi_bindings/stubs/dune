(data_only_dirs src)

(dirs :standard \ target)

;; Ignore target if it exists locally

;; no sandbox, we want the path to the _build directory

(rule
 (target dune-build-root)
 (deps
  (sandbox none))
 (action
  (system "echo -n $(realpath %{workspace_root}/..) > %{target}")))

(rule
 (enabled_if
  (= %{env:MARLIN_PLONK_STUBS=n} n))
 (targets libwires_15_stubs.a)
 (deps
  Cargo.toml
  rust-toolchain.toml
  (source_tree src)
  (source_tree ../../proof-systems)
  (env_var MARLIN_PLONK_STUBS))
 (locks /cargo-lock) ;; lock for rustup
 (action
  (progn
   (setenv
    CARGO_TARGET_DIR
    "%{read:dune-build-root}/cargo_kimchi_stubs"
    (setenv
     RUSTFLAGS
     "-C target-feature=+bmi2,+adx"
     (run cargo build --release)))
   (run
    cp
    %{read:dune-build-root}/cargo_kimchi_stubs/release/libwires_15_stubs.a
    .))))

;; copy from $MARLIN_PLONK_STUBS if this exists

(rule
 (enabled_if
  (<> %{env:MARLIN_PLONK_STUBS=n} n))
 (targets libwires_15_stubs.a)
 (deps
  (env_var MARLIN_PLONK_STUBS))
 (action
  (progn
   (copy
    %{env:MARLIN_PLONK_STUBS=n}/lib/libwires_15_stubs.a
    libwires_15_stubs.a))))

;; libraries

(library
 (public_name kimchi_types)
 (name kimchi_types)
 (modules kimchi_types)
 (instrumentation
  (backend bisect_ppx))
 (inline_tests)
 (preprocess
  (pps ppx_version ppx_inline_test)))

(library
 (public_name pasta_bindings)
 (name pasta_bindings)
 (modules pasta_bindings)
 (libraries kimchi_types)
 (foreign_archives wires_15_stubs)
 (c_library_flags :standard "-lpthread")
 (instrumentation
  (backend bisect_ppx))
 (inline_tests)
 (preprocess
  (pps ppx_version ppx_inline_test)))

(library
 (public_name kimchi_bindings)
 (name kimchi_bindings)
 (modules kimchi_bindings)
 (libraries pasta_bindings kimchi_types)
 (instrumentation
  (backend bisect_ppx))
 (inline_tests)
 (preprocess
  (pps ppx_version ppx_inline_test)))

;; generate the OCaml bindings

(rule
 (targets kimchi_types.ml pasta_bindings.ml kimchi_bindings.ml)
 (enabled_if
  (= %{env:MARLIN_PLONK_STUBS=n} n))
 (mode promote)
 (deps
  ../../../../.ocamlformat
  Cargo.toml
  rust-toolchain.toml
  (source_tree src)
  (source_tree ../../proof-systems)
  (env_var MARLIN_PLONK_STUBS))
 (locks /cargo-lock) ;; lock for rustup
 (action
  (progn
   (run rm -rf ./target)
   (run rm -f ./Cargo.lock)
   (setenv
    CARGO_TARGET_DIR
    "%{read:dune-build-root}/cargo_kimchi_bindgen"
    (run cargo run %{targets}))
   (run ocamlformat -i %{targets}))))

;; run from $MARLIN_PLONK_STUBS if this exists

(rule
 (targets kimchi_types.ml pasta_bindings.ml kimchi_bindings.ml)
 (enabled_if
  (<> %{env:MARLIN_PLONK_STUBS=n} n))
 (mode promote)
 (deps
  ../../../../.ocamlformat
  (env_var MARLIN_PLONK_STUBS))
 (action
  (progn
   (run %{env:MARLIN_PLONK_STUBS=n}/bin/main %{targets})
   (run ocamlformat -i %{targets}))))
