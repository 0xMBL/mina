ARG image=debian:stretch-slim
FROM ${image}
# Run with `docker build --build-arg deb_version=<version>`
ARG deb_version
ARG deb_release=unstable
ARG deb_codename=stretch
ARG network=devnet
ARG branch=compatible

ENV DEBIAN_FRONTEND noninteractive

# Dependencies
RUN apt-get update --quiet --yes \
  && apt-get upgrade --quiet --yes \
  && apt-get install --quiet --yes --no-install-recommends \
    apt-transport-https \
    ca-certificates \
    curl \
    dnsutils \
    dumb-init \
    gettext \
    gnupg2 \
    jq \
    libgmp10 \
    libgomp1 \
    libssl1.1 \
    libpq-dev \
    procps \
    python3 \
    tzdata \
    git \
    wget \
    sudo \
    unzip \
  && rm -rf /var/lib/apt/lists/*

#'libjemalloc.$' \


# --- Terraform tools
RUN wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg \
    && gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint \
    && echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $deb_codename main" | sudo tee /etc/apt/sources.list.d/hashicorp.list \
    && apt-get update --quiet --yes \
    && apt-get install --quiet --yes terraform \
    && rm -rf /var/lib/apt/lists/*


# Install google-cloud-sdk for GCLOUD_UPLOAD feature
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
  && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - \
  && apt-get update --quiet --yes \
  && apt-get install --quiet --yes --no-install-recommends google-cloud-sdk kubectl google-cloud-sdk-gke-gcloud-auth-plugin \
  && rm -rf /var/lib/apt/lists/*

ENV USE_GKE_GCLOUD_AUTH_PLUGIN=True

# --- Helm tools
RUN curl https://baltocdn.com/helm/signing.asc | sudo apt-key add - \
    && echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list \
    && sudo apt-get update -y \
    && sudo apt-get install -y helm

# Get yarn + nodejs
RUN curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash - \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list \
    && sudo apt-get update \
    && sudo apt-get install -y nodejs yarn

# Mina daemon and mina test executive packages
RUN echo "Installing mina-test-executive and logproc onto image with version $deb_version from repo $deb_release $deb_codename " \
  && echo "deb [trusted=yes] http://packages.o1test.net $deb_codename $deb_release" > /etc/apt/sources.list.d/o1.list \
  && apt-get update --yes \
  && apt-get install --yes --allow-downgrades "mina-test-executive=$deb_version" "mina-logproc"

# Move to a non-root UID in the future (specifically 50000, as it is memorable and safely within the bounds of most systems)
# for now stick to root for compatibility
ARG UID=0

## Reset workdir, USER, and ${UID} for root-owned version
WORKDIR /root
USER 0

RUN git clone https://github.com/MinaProtocol/mina.git --branch $branch --depth 1 \
  && cd ./mina

WORKDIR /root/mina

# these env vars need to be overriden when the image is `docker run`
#test vars
ENV test_name=""
ENV mina_image=""
ENV archive_image=""
ENV debug_bool=False
#environment configuration vars
ENV GCP_LOGIN_ACCT_USERNAME=""
ENV KUBE_CONFIG_PATH=/root/.kube/config
ENV GCLOUD_API_KEY=""
ENV GOOGLE_CLOUD_KEYFILE_JSON=""
ENV AWS_ACCESS_KEY_ID=""
ENV AWS_SECRET_ACCESS_KEY=""
ENV AWS_DEFAULT_REGION=us-west-2

ENTRYPOINT ["/usr/bin/dumb-init", "gcloud auth login --no-launch-browser $GCP_LOGIN_ACCT_USERNAME && \
gcloud config set project o1labs-192920 && \
gcloud container clusters get-credentials --region us-west1 mina-integration-west1 && \
kubectl config use-context gke_o1labs-192920_us-west1_mina-integration-west1 && \
gcloud auth activate-service-account automated-validation@o1labs-192920.iam.gserviceaccount.com --key-file=$GOOGLE_CLOUD_KEYFILE_JSON && \
mina-test-executive cloud $test_name --mina-image $mina_image --archive-image $archive_image $( if [[ $debug_bool ]] ; then echo --debug ; fi ) | tee test.log | mina-logproc -i inline -f '!(.level in ["Spam", "Debug"])'"]
