#################################################################################################
# The "build-deps" stage
# - Installs all compilers/interpreters, tools, and OS packages on debian buster-slim
#################################################################################################
FROM debian:buster-slim AS build-deps

# Ocaml Version
ARG OCAML_VERSION=4.07
ARG OCAML_REVISION=.1
ARG OPAM_VERSION=2.0.7

# Golang version number used to detemine tarball name
ARG GO_VERSION=1.13.10

# Rust Version passed into rustup-init, can also be "stable", "nightly" or similar
ARG RUST_VERSION=1.43.0

# OS package dependencies
# First add support for https and pkg-config for apt, then install everything else
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
  apt-get install --yes apt-transport-https pkg-config && \
  apt-get install --yes \
    build-essential \
    libboost-dev \
    libboost-program-options-dev \
    libffi-dev \
    libgmp-dev \
    libgmp3-dev \
    libjemalloc-dev \
    libpq-dev \
    libprocps-dev \
    libsodium-dev \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libcap-dev \
    cmake \
    m4 \
    git \
    curl \
    sudo \
    rsync \
    unzip \
    file


# Golang install of a given GO_VERSION (add -v for spam output of each file from the go dist)
# TODO: rosetta requires binary file downloads of this sort to be hashed + validated
RUN curl -s "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz" | tar -xz -C /usr/lib/


# Rust install via rustup-init to a given RUST_VERSION
# TODO: rosetta requires binary file downloads of this sort to be hashed + validated
RUN curl --proto '=https' --tlsv1.2 -sSf -o /tmp/rustup-init \
  https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init && \
  chmod +x /tmp/rustup-init && \
  /tmp/rustup-init -y --default-toolchain "${RUST_VERSION}" --profile minimal && \
  rm /tmp/rustup-init
# For more about rustup-init see: https://github.com/rust-lang/rustup/blob/master/README.md
# As opposed to introducing another shell script here (that mostly just determines the platform)
# we just download the binary for the only platform we care about in this docker environment


# Opam install of a given OPAM_VERSION from github release
RUN curl -sL "https://github.com/ocaml/opam/releases/download/${OPAM_VERSION}/opam-${OPAM_VERSION}-x86_64-linux" -o /usr/bin/opam
RUN chmod +x /usr/bin/opam


# Create opam user and give sudo to make opam happy
RUN adduser --uid 1000 --disabled-password --gecos '' opam && \
  passwd -l opam && \
  chown -R opam:opam /home/opam && \
  echo 'opam ALL=(ALL:ALL) NOPASSWD:ALL' > /etc/sudoers.d/opam && \
  chmod 440 /etc/sudoers.d/opam && \
  chown root:root /etc/sudoers.d/opam


# Set up environment for running as opam user
WORKDIR /home/opam
USER opam
ENV HOME /home/opam

# Create the following user directory configs as the Opam user:
## Add go + rust to the path, unlimit the opam user,
## unlimit stack for future shells that might use spacetime,
## disable ipv6
## disable sandboxing to allow unprivledged builds
RUN mkdir --mode=700 ~/.gnupg && \
  echo 'export PATH="$PATH:/usr/lib/go/bin:$HOME/.cargo/bin"' >> ~/.bashrc && \
  echo 'ulimit -s unlimited' >> ~/.bashrc && \
  echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf


# bubblewrap was disabled in other builds via the dockerfile-toolchain images, and in the default opam2 image.
# Importantly, this also allows the entire container to be built with a permissionless builder, avoiding docker-in-docker
# Keeping the exact install steps from the official opam image in case we want to re-enable in the future.
#RUN curl -fL https://github.com/projectatomic/bubblewrap/releases/download/v0.4.1/bubblewrap-0.4.1.tar.xz | \
#   tar -xJ && \
#   cd bubblewrap-0.4.1 && ./configure --prefix=/usr/local && make && sudo make install && \
#   cd - && rm -rf bubblewrap-0.4.1


# Avoid the need to pass -y everywhere, although we still do because its not hard
ENV OPAMYES 1

# Ocaml install of a given OCAML_VERSION via opam switch
# additionally initializes opam with sandboxing disabled, as we did not install bubblewrap above.
RUN git clone git://github.com/ocaml/opam-repository /home/opam/opam-repository && \
  opam init --disable-sandboxing -k git -a ~/opam-repository --bare && \
  opam switch create "${OCAML_VERSION}" "ocaml-base-compiler.${OCAML_VERSION}${OCAML_REVISION}" && \
  opam switch "${OCAML_VERSION}"

# Alternate variants for 4.07 that are included in the official opam image
#  opam switch create 4.07+afl ocaml-variants.4.07.1+afl && \
#  opam switch create 4.07+flambda ocaml-variants.4.07.1+flambda && \
#  opam switch create 4.07+default-unsafe-string ocaml-variants.4.07.1+default-unsafe-string && \
#  opam switch create 4.07+force-safe-string ocaml-variants.4.07.1+force-safe-string && \


#################################################################################################
# The "opam-deps" Stage
# - Continues from the build-deps image
# - Installs all opam dependencies and pins from coda's github
# - Includes the entire coda codebase and submodules in "${CODA_DIR}" (must be writable by opam user)
# - Largely mirrors/replaces ./scripts/setup-opam.sh
#################################################################################################
FROM build-deps AS opam-deps

# location of repo used for pins and external package commits
ARG CODA_DIR=~/coda

# location of external packages
ARG EXTERNAL_PKG_DIR=$CODA_DIR/src/external

# don't keep sources, to force reinstall of pinned packages from Coda sources
# and to keep Docker image reasonable size
ARG OPAMKEEPBUILDDIR=false
ARG OPAMREUSEBUILDDIR=false

RUN mkdir -p $CODA_DIR
WORKDIR $CODA_DIR
RUN git clone -b rosetta/dockerfile https://github.com/CodaProtocol/coda ./ && git submodule update --init --recursive

# All our ocaml packages
RUN opam switch import src/opam.export && eval $(opam config env)

# Our pins
RUN opam pin add src/external/ocaml-extlib && \
  opam pin add src/external/ocaml-sodium && \
  opam pin add src/external/rpc_parallel && \
  opam pin add src/external/digestif && \
  opam pin add src/external/async_kernel && \
  opam pin add src/external/coda_base58 && \
  opam pin add src/external/graphql_ppx

# workaround a permissions problem in rpc_parallel .git
# TODO: Does this issue still exist?
RUN sudo chmod -R u+rw ~/.opam && eval $(opam config env)

#################################################################################################
# The "builder" Stage
# - builds coda and any other binaries required to run a node
# - should not include any data related to joining a specific network, only the node software itself
#################################################################################################
FROM opam-deps AS builder
